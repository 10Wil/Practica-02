#include <iostream>
#include <cstdlib>

template <typename T>
class MiCola {
private:
    T* datos;
    int capacidad;
    int frente; 
    int fin; 
    int contador; 

public:
    MiCola(int tam = 1000) : capacidad(tam), frente(0), fin(-1), contador(0) {
        datos = new T[capacidad];
    }


    ~MiCola() {
        delete[] datos;
    }

    void Encolar(const T& elemento) {
        if (EsLlena()) {
            std::cerr << "La cola está llena. No se puede encolar." << std::endl;
            return;
        }
        fin = (fin + 1) % capacidad;
        datos[fin] = elemento;
        contador++;
    }

    T Desencolar() {
        if (EsVacia()) {
            std::cerr << "La cola está vacía. No se puede desencolar." << std::endl;
            return T();
        }
        T elemento = datos[frente];
        frente = (frente + 1) % capacidad;
        contador--;
        return elemento;
    }

    T Frente() const {
        if (EsVacia()) {
            std::cerr << "La cola está vacía." << std::endl;
            return T();
        }
        return datos[frente];
    }

    bool EsVacia() const {
        return contador == 0;
    }

    bool EsLlena() const {
        return contador == capacidad;
    }

    int Tamano() const {
        return contador;
    }
};

int main() {
    MiCola<int> miCola(5);
    miCola.Encolar(10);
    miCola.Encolar(20);
    miCola.Encolar(30);
    miCola.Encolar(15);

    std::cout << "Primer numero de la: " << miCola.Frente() << std::endl;
    std::cout << "Tamaño de la cola: " << miCola.Tamano() << std::endl;

    while (!miCola.EsVacia()) {
        std::cout << "Desencolando: " << miCola.Desencolar() << std::endl;
    }

    return 0;
}
